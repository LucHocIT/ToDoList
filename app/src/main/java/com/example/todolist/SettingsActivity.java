package com.example.todolist;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.app.AppCompatDelegate;

import com.example.todolist.manager.CategoryManager;
import com.example.todolist.manager.ThemeManager;
import com.example.todolist.util.SettingsManager;

public class SettingsActivity extends AppCompatActivity {
    
    private SharedPreferences sharedPreferences;
    private ThemeManager themeManager;
    
    // UI Components
    private ImageView btnBack;
    private Switch switchNotifications;
    private Switch switchSound;
    private Switch switchVibration;
    private LinearLayout layoutLanguage;
    private LinearLayout layoutAboutApp;
    private LinearLayout layoutPrivacyPolicy;
    private LinearLayout layoutTerms;
    private LinearLayout layoutHelpSupport;
    private LinearLayout layoutResetData;
    
    private TextView tvLanguageValue;
    private TextView tvAppVersion;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_settings);
        
        initSharedPreferences();
        initThemeManager();
        initViews();
        setupClickListeners();
        loadCurrentSettings();
        
        // Apply current theme
        if (themeManager != null) {
            themeManager.applyCurrentTheme();
        }
    }
    
    private void initSharedPreferences() {
        sharedPreferences = getSharedPreferences("TodoListSettings", MODE_PRIVATE);
    }
    
    private void initThemeManager() {
        themeManager = new ThemeManager(this, null);
    }
    
    private void initViews() {
        // Header
        btnBack = findViewById(R.id.btn_back_settings);
        
        // Notification Settings
        switchNotifications = findViewById(R.id.switch_notifications);
        switchSound = findViewById(R.id.switch_sound);
        switchVibration = findViewById(R.id.switch_vibration);
        
        // General Settings
        layoutLanguage = findViewById(R.id.layout_language);
        tvLanguageValue = findViewById(R.id.tv_language_value);
        
        // About & Support
        layoutAboutApp = findViewById(R.id.layout_about_app);
        layoutPrivacyPolicy = findViewById(R.id.layout_privacy_policy);
        layoutTerms = findViewById(R.id.layout_terms);
        layoutHelpSupport = findViewById(R.id.layout_help_support);
        tvAppVersion = findViewById(R.id.tv_app_version);
        
        // Advanced Settings
        layoutResetData = findViewById(R.id.layout_reset_data);
    }
    
    private void setupClickListeners() {
        // Back button
        btnBack.setOnClickListener(v -> finish());
        
        // Notification switches
        switchNotifications.setOnCheckedChangeListener((buttonView, isChecked) -> {
            SettingsManager.setNotificationsEnabled(this, isChecked);
            if (!isChecked) {
                // Disable sound and vibration when notifications are disabled
                switchSound.setChecked(false);
                switchVibration.setChecked(false);
                switchSound.setEnabled(false);
                switchVibration.setEnabled(false);
                // L∆∞u v√†o SettingsManager ƒë·ªÉ ƒë·∫£m b·∫£o t·∫Øt th·∫≠t s·ª±
                SettingsManager.setSoundEnabled(this, false);
                SettingsManager.setVibrationEnabled(this, false);
            } else {
                switchSound.setEnabled(true);
                switchVibration.setEnabled(true);
            }
        });
        
        switchSound.setOnCheckedChangeListener((buttonView, isChecked) -> {
            SettingsManager.setSoundEnabled(this, isChecked);
        });
        
        switchVibration.setOnCheckedChangeListener((buttonView, isChecked) -> {
            SettingsManager.setVibrationEnabled(this, isChecked);
        });

        // Language setting
        layoutLanguage.setOnClickListener(v -> showLanguageDialog());
        
        // About & Support
        layoutAboutApp.setOnClickListener(v -> showAboutDialog());
        layoutPrivacyPolicy.setOnClickListener(v -> showPrivacyPolicy());
        layoutTerms.setOnClickListener(v -> showTermsOfService());
        layoutHelpSupport.setOnClickListener(v -> showHelpSupport());
        
        // Advanced Settings
        layoutResetData.setOnClickListener(v -> showResetDataDialog());
    }
    
    private void loadCurrentSettings() {
        // S·ª≠a logic c√†i ƒë·∫∑t n·∫øu c√≥ v·∫•n ƒë·ªÅ
        SettingsManager.fixNotificationSettings(this);
        
        // Load notification settings using SettingsManager
        boolean notificationsEnabled = SettingsManager.isNotificationsEnabled(this);
        boolean soundEnabled = SettingsManager.isSoundEnabled(this);
        boolean vibrationEnabled = SettingsManager.isVibrationEnabled(this);
        
        switchNotifications.setChecked(notificationsEnabled);
        switchSound.setChecked(soundEnabled);
        switchVibration.setChecked(vibrationEnabled);
        
        // Enable/disable sound and vibration based on notifications setting
        switchSound.setEnabled(notificationsEnabled);
        switchVibration.setEnabled(notificationsEnabled);
        
        // Load language
        String language = SettingsManager.getLanguage(this);
        tvLanguageValue.setText(language);
        
        // Load app version
        try {
            String versionName = getPackageManager().getPackageInfo(getPackageName(), 0).versionName;
            tvAppVersion.setText("Phi√™n b·∫£n " + versionName);
        } catch (Exception e) {
            tvAppVersion.setText("Phi√™n b·∫£n 1.0");
        }
    }
    

    
    private void showLanguageDialog() {
        String[] languages = {"Ti·∫øng Vi·ªát", "English", "‰∏≠Êñá", "ÌïúÍµ≠Ïñ¥"};
        
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Ch·ªçn ng√¥n ng·ªØ");
        builder.setItems(languages, (dialog, which) -> {
            String selectedLanguage = languages[which];
            tvLanguageValue.setText(selectedLanguage);
            SettingsManager.setLanguage(this, selectedLanguage);
            Toast.makeText(this, "Ng√¥n ng·ªØ s·∫Ω ƒë∆∞·ª£c √°p d·ª•ng khi kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng", Toast.LENGTH_LONG).show();
        });
        builder.show();
    }
    
    private void showAboutDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("V·ªÅ ·ª©ng d·ª•ng To-Do List");
        builder.setMessage("To-Do List - ·ª®ng d·ª•ng qu·∫£n l√Ω c√¥ng vi·ªác th√¥ng minh\n\n" +
                "Phi√™n b·∫£n: 1.0\n" +
                "Nh√† ph√°t tri·ªÉn: Team Development\n" +
                "Email: phamluc2304@gmail.com\n\n" +
                "·ª®ng d·ª•ng gi√∫p b·∫°n qu·∫£n l√Ω c√¥ng vi·ªác h√†ng ng√†y m·ªôt c√°ch hi·ªáu qu·∫£ v·ªõi giao di·ªán ƒë·∫πp m·∫Øt v√† nhi·ªÅu t√≠nh nƒÉng h·ªØu √≠ch.");
        builder.setPositiveButton("ƒê√≥ng", null);
        builder.show();
    }
    
    private void showPrivacyPolicy() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Ch√≠nh s√°ch b·∫£o m·∫≠t");
        builder.setMessage("Ch√∫ng t√¥i cam k·∫øt b·∫£o v·ªá quy·ªÅn ri√™ng t∆∞ c·ªßa b·∫°n:\n\n" +
                "‚Ä¢ D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u tr·ªØ c·ª•c b·ªô tr√™n thi·∫øt b·ªã\n" +
                "‚Ä¢ Kh√¥ng thu th·∫≠p th√¥ng tin c√° nh√¢n\n" +
                "‚Ä¢ Kh√¥ng chia s·∫ª d·ªØ li·ªáu v·ªõi b√™n th·ª© ba\n" +
                "‚Ä¢ Ch·ªâ y√™u c·∫ßu quy·ªÅn c·∫ßn thi·∫øt cho ho·∫°t ƒë·ªông ·ª©ng d·ª•ng");
        builder.setPositiveButton("ƒê√£ hi·ªÉu", null);
        builder.show();
    }
    
    private void showTermsOfService() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng");
        builder.setMessage("B·∫±ng vi·ªác s·ª≠ d·ª•ng ·ª©ng d·ª•ng n√†y, b·∫°n ƒë·ªìng √Ω:\n\n" +
                "‚Ä¢ S·ª≠ d·ª•ng ·ª©ng d·ª•ng cho m·ª•c ƒë√≠ch c√° nh√¢n\n" +
                "‚Ä¢ Kh√¥ng s·ª≠ d·ª•ng ·ª©ng d·ª•ng cho m·ª•c ƒë√≠ch b·∫•t h·ª£p ph√°p\n" +
                "‚Ä¢ Nh√† ph√°t tri·ªÉn kh√¥ng ch·ªãu tr√°ch nhi·ªám cho d·ªØ li·ªáu b·ªã m·∫•t\n" +
                "‚Ä¢ B·∫°n c√≥ tr√°ch nhi·ªám sao l∆∞u d·ªØ li·ªáu c·ªßa m√¨nh");
        builder.setPositiveButton("ƒê·ªìng √Ω", null);
        builder.show();
    }
    
    private void showHelpSupport() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Tr·ª£ gi√∫p & H·ªó tr·ª£");
        builder.setMessage("C·∫ßn tr·ª£ gi√∫p? Li√™n h·ªá v·ªõi ch√∫ng t√¥i:\n\n" +
                "üìß Email: phamluc2304@gmail.com\n" +
                "üì± ƒêi·ªán tho·∫°i: 0354337494\n\n" +
                "Ho·∫∑c b·∫°n c√≥ th·ªÉ:\n" +
                "‚Ä¢ Xem h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng trong ·ª©ng d·ª•ng\n" +
                "‚Ä¢ G·ª≠i ph·∫£n h·ªìi qua email\n" +
                "‚Ä¢ B√°o c√°o l·ªói ƒë·ªÉ c·∫£i thi·ªán ·ª©ng d·ª•ng");
        builder.setPositiveButton("G·ª≠i email", (dialog, which) -> {
            Intent emailIntent = new Intent(Intent.ACTION_SEND);
            emailIntent.setType("message/rfc822");
            emailIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{"phamluc2304@gmail.com"});
            emailIntent.putExtra(Intent.EXTRA_SUBJECT, "H·ªó tr·ª£ ·ª©ng d·ª•ng To-Do List");
            emailIntent.putExtra(Intent.EXTRA_TEXT, "Xin ch√†o,\n\nT√¥i c·∫ßn h·ªó tr·ª£ v·ªÅ ·ª©ng d·ª•ng To-Do List:\n\n");
            
            try {
                startActivity(Intent.createChooser(emailIntent, "G·ª≠i email"));
            } catch (Exception e) {
                Toast.makeText(this, "Kh√¥ng t√¨m th·∫•y ·ª©ng d·ª•ng email", Toast.LENGTH_SHORT).show();
            }
        });
        builder.setNegativeButton("ƒê√≥ng", null);
        builder.show();
    }
    

    
    private void showResetDataDialog() {
        new AlertDialog.Builder(this)
            .setTitle("Reset d·ªØ li·ªáu")
            .setMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ d·ªØ li·ªáu v√† kh√¥i ph·ª•c v·ªÅ m·∫∑c ƒë·ªãnh?\n\nThao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c!")
            .setPositiveButton("ƒê·ªìng √Ω", (dialog, which) -> {
                performDataReset();
            })
            .setNegativeButton("H·ªßy", null)
            .setIcon(android.R.drawable.ic_dialog_alert)
            .show();
    }
    
    private void performDataReset() {
        try {
            // Reset database using CategoryManager
            CategoryManager categoryManager = new CategoryManager(this, null, null);
            categoryManager.clearAllDataAndReset();
            
            // Reset app settings
            SettingsManager.resetAllSettings(this);
            
            Toast.makeText(this, "ƒê√£ reset t·∫•t c·∫£ d·ªØ li·ªáu th√†nh c√¥ng", Toast.LENGTH_LONG).show();
            
            // Restart app to reflect changes
            Intent intent = getPackageManager().getLaunchIntentForPackage(getPackageName());
            if (intent != null) {
                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
                startActivity(intent);
                finish();
            }
        } catch (Exception e) {
            Toast.makeText(this, "C√≥ l·ªói x·∫£y ra khi reset d·ªØ li·ªáu: " + e.getMessage(), Toast.LENGTH_LONG).show();
        }
    }


}
